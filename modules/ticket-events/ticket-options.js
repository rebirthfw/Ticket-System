const config = require(`${process.cwd()}/botconfig/config.json`);
const ee = require(`${process.cwd()}/botconfig/embed.json`);
const {
    MessageEmbed,
    MessageActionRow,
    MessageButton
} = require("discord.js");
const Discord = require("discord.js");
const discordTranscripts = require('discord-html-transcripts');
const Data = require(`${process.cwd()}/models/ticket-user`);

module.exports = async (client) => {
    const description = {
        name: "Ticket-System Extra Options",
    }
    client.logger(`„Ä¢ Module: Loaded ${description.name}`.bold.green);

    client.on("interactionCreate", async (interaction) => {
        try {

            if (!interaction.guild.me.permissions.has(Discord.Permissions.FLAGS.SEND_MESSAGES)) return;
            if (!interaction.guild.me.permissions.has(Discord.Permissions.FLAGS.USE_EXTERNAL_EMOJIS)) return;
            if (!interaction.guild.me.permissions.has(Discord.Permissions.FLAGS.EMBED_LINKS)) return;

            if (!interaction.isButton()) return;
            if (!["ticket-close", "ticket-reopen", "ticket-transcript", "ticket-delete", "ticket-lock", "ticket-unlock", "ticket-claim"].includes(interaction.customId)) return;

            if (interaction.member.roles.cache.has(config.ticket_extra.ticket_supporter_role)) {

                Data.findOne({
                    channelID: interaction.channel.id
                }, async (err, data) => {
                    if (err) throw err;
                    if (!data) return interaction.reply({
                        embeds: [new MessageEmbed()
                            .setTitle(`–î–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–ª–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!`)
                            .setColor(ee.wrongcolor)
                        ]
                    })

                    switch (interaction.customId) {
                        case "ticket-close":
                            if (data.closed == true) return interaction.reply({
                                embeds: [new MessageEmbed()
                                    .setTitle(`–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç.`)
                                    .setColor(ee.wrongcolor)
                                ],
                                ephemeral: true
                            })
                            await Data.updateOne({
                                channelID: interaction.channel.id
                            }, {
                                closed: true
                            });

                            const CloseEmbed = new MessageEmbed()
                                .setDescription(`üîê | –ë–∏–ª–µ—Ç –∑–∞–∫—Ä—ã—Ç <@${interaction.user.id}>`)
                                .setColor(ee.wrongcolor)

                            const CloseEmbed2 = new MessageEmbed()
                                .setDescription(`\`\`\`
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\`\`\``)
                                .setColor(ee.mediancolor)

                            const CloseButtons = new MessageActionRow()
                                .addComponents(
                                    new MessageButton()
                                    .setCustomId('ticket-transcript')
                                    .setLabel('–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É')
                                    .setEmoji("üìù")
                                    .setStyle('SUCCESS'),
                                    new MessageButton()
                                    .setCustomId('ticket-reopen')
                                    .setLabel('–ó–∞–Ω–æ–≤–æ –æ—Ç–∫—Ä—ã—Ç—å')
                                    .setEmoji("üîì")
                                    .setStyle('SECONDARY'),
                                    new MessageButton()
                                    .setCustomId('ticket-delete')
                                    .setEmoji("üóëÔ∏è")
                                    .setLabel('–£–¥–∞–ª–∏—Ç—å')
                                    .setStyle('DANGER'),
                                )

                            const Closeuser = interaction.guild.members.cache.get(data.userID)
                            interaction.channel.permissionOverwrites.edit(Closeuser, {
                                SEND_MESSAGES: false,
                                VIEW_CHANNEL: false,
                                ATTACH_FILES: false,
                                READ_MESSAGE_HISTORY: false,
                            });

                            interaction.reply({
                                embeds: [CloseEmbed, CloseEmbed2],
                                components: [CloseButtons]
                            })
                            // interaction.deferUpdate();
                            break;
                        case "ticket-reopen":
                            if (data.closed == false) return interaction.reply({
                                embeds: [new MessageEmbed()
                                    .setTitle(`–≠—Ç–æ—Ç –±–∏–ª–µ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`)
                                    .setColor(ee.wrongcolor)
                                ],
                                ephemeral: true
                            })
                            await Data.updateOne({
                                channelID: interaction.channel.id
                            }, {
                                closed: false
                            });

                            const Reopenuser = interaction.guild.members.cache.get(data.userID)
                            interaction.channel.permissionOverwrites.edit(Reopenuser, {
                                SEND_MESSAGES: true,
                                VIEW_CHANNEL: true,
                                ATTACH_FILES: true,
                                READ_MESSAGE_HISTORY: true,
                            });


                            const reopenEmbed = new MessageEmbed()
                                .setDescription(`–ë–∏–ª–µ—Ç –∑–∞–Ω–æ–≤–æ –æ—Ç–∫—Ä—ã–ª <@${interaction.user.id}>`)
                                .setColor(ee.wrongcolor)

                            interaction.reply({
                                embeds: [reopenEmbed]
                            })
                            // interaction.deferUpdate();
                            break;
                        case "ticket-transcript":
                            const TranscriptUser = interaction.guild.members.cache.get(data.userID)

                            const channel = interaction.channel;
                            const attachment = await discordTranscripts.createTranscript(channel, {
                                limit: -1,
                                returnBuffer: false,
                                fileName: `ticket-${data.channelIndex}.html`
                            });

                            const TranscriptClimedByUser = interaction.guild.members.cache.get(data.claimedBy)

                            if (TranscriptClimedByUser) {
                                const transcriptSendEmbed = new MessageEmbed()
                                    .setAuthor({
                                        name: TranscriptUser.user.tag,
                                        iconURL: TranscriptUser.user.displayAvatarURL({
                                            dynamic: true
                                        })
                                    })
                                    .setTitle(`üìÑ –°—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ –±–∏–ª–µ—Ç–∞`)
                                    .setColor(ee.color)
                                    .setFooter({
                                        text: `${interaction.guild.name}`,
                                        iconURL: interaction.guild.iconURL({
                                            dynamic: true
                                        })
                                    })
                                    .setTimestamp()
                                    .setDescription(`
–°—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ **${TranscriptUser.user.tag}** (${TranscriptUser.id})
–û–±—Ä–∞–±–æ—Ç–∞–ª: **${TranscriptClimedByUser.user.tag}** (${TranscriptClimedByUser.id})`)

                                const transcriptChannel = interaction.guild.channels.cache.get(config.ticket_extra.transcript_channel);
                                if (!transcriptChannel) return;

                                transcriptChannel.send({
                                    embeds: [transcriptSendEmbed],
                                    files: [attachment]
                                });

                            } else {
                                const transcriptSendEmbed = new MessageEmbed()
                                    .setAuthor({
                                        name: TranscriptUser.user.tag,
                                        iconURL: TranscriptUser.user.displayAvatarURL({
                                            dynamic: true
                                        })
                                    })
                                    .setTitle(`üìÑ –°—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ –±–∏–ª–µ—Ç–∞`)
                                    .setColor(ee.color)
                                    .setFooter({
                                        text: `${interaction.guild.name}`,
                                        iconURL: interaction.guild.iconURL({
                                            dynamic: true
                                        })
                                    })
                                    .setTimestamp()
                                    .setDescription(`–°—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ **${TranscriptUser.user.tag}** (${TranscriptUser.id})`)

                                const transcriptChannel = await interaction.guild.channels.cache.get(config.ticket_extra.transcript_channel);
                                if (!transcriptChannel) return;
                                transcriptChannel.send({
                                    embeds: [transcriptSendEmbed],
                                    files: [attachment]
                                });
                            }

                            const transcriptDMSendEmbed = new MessageEmbed()
                                .setAuthor({
                                    name: interaction.user.tag,
                                    iconURL: interaction.user.displayAvatarURL({
                                        dynamic: true
                                    })
                                })
                                .setTitle(`üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –æ—Ç ${interaction.guild.name}`)
                                .setColor(ee.color)
                                .setDescription(`–°—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞**${TranscriptUser.user.tag}** (${TranscriptUser.id})`)

                            if (TranscriptUser) {
                                TranscriptUser.send({
                                    embeds: [transcriptDMSendEmbed],
                                    files: [attachment]
                                }).catch(err => console.log("–Ω–µ –º–æ–≥—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—É"))
                            }

                            const transcriptEmbed = new MessageEmbed()
                                .setTitle(`üìÑ –°—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ –±–∏–ª–µ—Ç–∞`)
                                .setColor(ee.color)
                                .setDescription(`–°—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ <#${config.ticket_extra.transcript_channel}>.`)

                            interaction.reply({
                                embeds: [transcriptEmbed]
                            });
                            // interaction.deferUpdate();
                            break;
                        case "ticket-delete":
                            interaction.reply({
                                embeds: [new MessageEmbed()
                                    .setTitle(`–ë–∏–ª–µ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥!`)
                                    .setColor(ee.wrongcolor)
                                ]
                            })
                        
                            setTimeout(async () => {

                                await Data.findOneAndDelete({
                                    channelID: interaction.channel.id
                                });

                                interaction.channel.delete();
                            }, 10 * 1000)
                            //interaction.deferUpdate();
                            break;
                        case "ticket-lock":
                            if (data.closed == true) return interaction.reply({
                                embeds: [new MessageEmbed()
                                    .setTitle(`–≠—Ç–æ—Ç –±–∏–ª–µ—Ç –∑–∞–∫—Ä—ã—Ç, –ø–æ—ç—Ç–æ–º—É –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.`)
                                    .setColor(ee.wrongcolor)
                                ],
                                ephemeral: true
                            })
                            if (data.locked == true) return interaction.reply({
                                embeds: [new MessageEmbed()
                                    .setTitle(`–≠—Ç–æ—Ç –±–∏–ª–µ—Ç —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`)
                                    .setColor(ee.wrongcolor)
                                ],
                                ephemeral: true
                            })
                            await Data.updateOne({
                                channelID: interaction.channel.id
                            }, {
                                locked: true
                            });

                            const Lockuser = interaction.guild.members.cache.get(data.userID)
                            interaction.channel.permissionOverwrites.edit(Lockuser, {
                                SEND_MESSAGES: false,
                                VIEW_CHANNEL: true,
                                ATTACH_FILES: false,
                                READ_MESSAGE_HISTORY: true,
                            });

                            const lockEmbed = new MessageEmbed()
                                .setDescription(`–ë–∏–ª–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª <@${interaction.user.id}>`)
                                .setColor(ee.wrongcolor)

                            const lockEmbed2 = new MessageEmbed()
                                .setDescription(`\`\`\`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\`\`\``)
                                .setColor(ee.mediancolor)

                            const lockButtons = new MessageActionRow()
                                .addComponents(
                                    new MessageButton()
                                    .setCustomId('ticket-unlock')
                                    .setLabel('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å')
                                    .setEmoji("üîì")
                                    .setStyle('SECONDARY'),
                                )

                            interaction.reply({
                                embeds: [lockEmbed, lockEmbed2],
                                components: [lockButtons]
                            })

                            // interaction.deferUpdate();
                            break;
                        case "ticket-unlock":
                            if (data.closed == true) return interaction.reply({
                                embeds: [new MessageEmbed()
                                    .setTitle(`–≠—Ç–æ—Ç –±–∏–ª–µ—Ç –∑–∞–∫—Ä—ã—Ç, –ø–æ—ç—Ç–æ–º—É –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.`)
                                    .setColor(ee.wrongcolor)
                                ],
                                ephemeral: true
                            })
                            if (data.locked == false) return interaction.reply({
                                embeds: [new MessageEmbed()
                                    .setTitle(`–≠—Ç–æ—Ç –±–∏–ª–µ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`)
                                    .setColor(ee.wrongcolor)
                                ],
                                ephemeral: true
                            })
                            await Data.updateOne({
                                channelID: interaction.channel.id
                            }, {
                                locked: false
                            });

                            const UnLockuser = interaction.guild.members.cache.get(data.userID)
                            interaction.channel.permissionOverwrites.edit(UnLockuser, {
                                SEND_MESSAGES: true,
                                VIEW_CHANNEL: true,
                                ATTACH_FILES: true,
                                READ_MESSAGE_HISTORY: true,
                            });

                            const UnlockedEmbed = new MessageEmbed()
                                .setDescription(`–ë–∏–ª–µ—Ç –æ—Ç–∫—Ä—ã–ª <@${interaction.user.id}>`)
                                .setColor(ee.wrongcolor)

                            interaction.reply({
                                embeds: [UnlockedEmbed]
                            })
                            // interaction.deferUpdate();
                            break;
                        case "ticket-claim":
                            if (data.claimed == true) return interaction.reply({
                                embeds: [new MessageEmbed()
                                    .setDescription(`–≠—Ç–æ—Ç –±–∏–ª–µ—Ç —É–∂–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω <@${data.claimedBy}>.`)
                                    .setColor(ee.wrongcolor)
                                ],
                                ephemeral: true
                            })
                            await Data.updateOne({
                                channelID: interaction.channel.id
                            }, {
                                claimed: true,
                                claimedBy: interaction.user.id
                            });

                            interaction.channel.permissionOverwrites.edit(interaction.user.id, {
                                SEND_MESSAGES: true,
                                VIEW_CHANNEL: true,
                                ATTACH_FILES: true,
                                READ_MESSAGE_HISTORY: true
                            });

                            const ClaimedEmbed = new MessageEmbed()
                                .setDescription(`–ë–∏–ª–µ—Ç —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç <@${interaction.user.id}>`)
                                .setColor(ee.color)

                            interaction.channel.edit({
                                name: `üìÇ-t-${data.channelIndex}-${interaction.user.username}`
                            })

                            interaction.reply({
                                embeds: [ClaimedEmbed]
                            })

                            // interaction.deferUpdate();
                            break;
                    }
                })

            } else {
                interaction.reply({
                    embeds: [new MessageEmbed()
                        .setDescription(`${client.allEmojis.x} **–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–æ–ª–µ–π, —á—Ç–æ–±—ã –ø—Ä–∏–∫–∞—Å–∞—Ç—å—Å—è –∫ —ç—Ç–∏–º –∫–Ω–æ–ø–∫–∞–º!**`)
                        .setColor(ee.wrongcolor)
                    ],
                    ephemeral: true
                })
            }


        } catch (err) {
            console.log(err)
        }
    })
}


